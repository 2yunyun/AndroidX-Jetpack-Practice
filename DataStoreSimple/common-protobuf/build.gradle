/**
 * plugins 和 apply plugin 的区别：
 * plugins 是一种比较新的方法，它所引用的插件必须在 Gradle plugin repository 的仓库可见的
 * apply plugin 是一种比较老的方式，在 Android4.1 的时候，创建项目的时候，已经将 apply plugin 方法替换为 plugins
 *
 */

plugins {
    id 'com.android.library'
    id "com.google.protobuf" version "0.8.12"
}

// 或者使用下面的方式，但是不建议使用
//apply plugin: 'com.android.library'
//apply plugin: "com.google.protobuf"

android {
    compileSdkVersion 30

    // 设置 proto 文件位置
    sourceSets {
        main {
            proto {
                // proto 文件默认路径是 src/main/proto
                // 可以通过 srcDir 修改 proto 文件的位置
                srcDir 'src/main/proto'
            }
        }
    }
}


/**
 * 注意配置 protoc 命令，分为不同的版本，版本不同配置的方式不同，
 * 网上大部分都是 3.0.x ~ 3.7.x 的配置方式，关于这种配置方法，可以查看 [protobuf-gradle-plugin](https://github.com/google/protobuf-gradle-plugin)  文档，这里不在演示了，也不建议使用
 * 在此项目中使用的是 3.8 以后 的配置的配置，
 */
protobuf {
    // 设置 protoc 的版本
    protoc {
        // //从仓库下载 protoc 这里的版本号需要与依赖 com.google.protobuf:protobuf-javalite:xxx 版本相同
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }

    // 默认生成目录 $buildDir/generated/source/proto 通过 generatedFilesBaseDir 改变生成位置
    generatedFilesBaseDir = "$projectDir/src/main"
}

// 添加 protobuf 需要的依赖，这里是用的是 javalite 版本
dependencies {
    implementation "com.google.protobuf:protobuf-javalite:3.10.0"
}